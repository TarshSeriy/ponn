import os
import requests
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CREATOR_ID = int(os.getenv("CREATOR_ID"))  # —Ç–≤–æ–π Telegram ID

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üéâ –ô–æ–æ–æ–æ–æ–æ–æ–æ –Ω–∞—Ç–∏—Å–∫–∞–π –∂–æ—Å–∫", web_app=WebAppInfo(url="https://pon-alpha.vercel.app/"))]
    ]
    await update.message.reply_text(
        "–ó –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫—Ä–∞—Å—É–Ω–µ—á–∫–æ! üéà –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É ‚Äî —Ç–∞–º —Å—é—Ä–ø—Ä–∏–∑ üëÄ\n\n"
        "–ê —â–µ –Ω–∞–ø–∏—à–∏ *`/cat`* ‚Äî —ñ –æ—Ç—Ä–∏–º–∞—î—à –º–∏–ª–∏ –∫–æ—Ç–∏–∫–∞ üòª\n\n"
        "–°–ø–æ–¥–æ–±–∞–ª–æ—Å—å? –ù–∞–ø–∏—à–∏ —â–æ—Å—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, *–¥—è–∫—É—é*) ‚Äî —ñ —Ç–≤–æ—Ä–µ—Ü—å —Ç–æ–±—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å üíå",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode="Markdown"
    )

# /cat ‚Äî —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ—Ç
async def cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get("https://api.thecatapi.com/v1/images/search")
        data = response.json()
        cat_url = data[0]["url"]
        await update.message.reply_photo(cat_url, caption="–í–æ—Ç —Ç–µ–±–µ –∫–æ—Ç–∏–∫ üòª")
    except Exception:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ—Ç–∏–∫ —É–±–µ–∂–∞–ª üòø")

# —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∞—Å–∏–±–æ –∏ —Ç.–ø.)
async def handle_thanks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user = update.message.from_user

    msg = (
        f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n"
        f"{user_text}\n\n"
        f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π:\n/–æ—Ç–≤–µ—Ç {user.id} <—Ç–µ–∫—Å—Ç>"
    )
    await context.bot.send_message(chat_id=CREATOR_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–æ–∑–¥–∞—Ç–µ–ª—å –µ–≥–æ —É–≤–∏–¥–∏—Ç –∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –æ—Ç–≤–µ—Ç–∏—Ç ‚ù§Ô∏è")

# /–æ—Ç–≤–µ—Ç <user_id> <—Ç–µ–∫—Å—Ç>
async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != CREATOR_ID:
        await update.message.reply_text("‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å.")
        return

    try:
        args = context.args
        target_id = int(args[0])
        reply_message = ' '.join(args[1:])
        await context.bot.send_message(chat_id=target_id, text=f"üë§ –û—Ç–≤–µ—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n{reply_message}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n/–æ—Ç–≤–µ—Ç user_id —Ç–µ–∫—Å—Ç")

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("cat", cat))
app.add_handler(CommandHandler("–æ—Ç–≤–µ—Ç", reply_to_user))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_thanks))

app.run_polling()
